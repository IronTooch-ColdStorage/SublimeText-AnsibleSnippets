<snippet>
    <content><![CDATA[
  
 - name:
   # Manage git checkouts of repositories to deploy files or software.
 - git:
     accept_hostkey:    #yes/no                         #default no       # Specify archive file path with extension. If specified, creates an archive file of the specified format containing the tree structure for the source tree. Allowed archive formats ["zip", "tar.gz", "tar", "tgz"]
     archive:                                                             # Specify archive file path with extension. If specified, creates an archive file of the specified format containing the tree structure for the source tree. Allowed archive formats ["zip", "tar.gz", "tar", "tgz"]
     bare:              #yes/no                         #default no       # If yes, repository will be created as a bare repo, otherwise it will be a standard repo with a workspace
     clone:             #yes/no                         #default yes      # If no, do not clone the repository if it does not exist locally
     depth:                                                               # Create a shallow clone with a history truncated to the specified number or revisions. The minimum possible value is 1
     dest:                           #required                            # The path of where the repository should be checked out. This parameter is required, unless clone is set to no '/srv/checkout'
     executable:                                                          # Path to git executable to use. If not supplied, the normal mechanism for resolving binary paths will be used
     force:             #yes/no                         #default no       # If yes, any modified files in the working repository will be discarded
     key_file:                                          #default None     # Specify an optional private key file to use for the checkout
     recursive:         #yes/no                         #default yes      # if no, repository will be cloned without the --recursive option, skipping sub-modules
     reference:                                                           # Reference repository (see "git clone --reference ...")
     refspec:                                                             # Add an additional refspec to be fetched. If version is set to a SHA-1 not reachable from any branch or tag, this option may be necessary to specify the ref containing the SHA-1. Uses the same syntax as the 'git fetch' command
     remote:                                            #default origin   # Name of the remote.
     repo:                           #required                            # git, SSH, or HTTP(S) protocol address of the git repository. 'https://foosball.example.org/path/to/repo.git'
     ssh_opts:                                          #default None     # Creates a wrapper script and exports the path as GIT_SSH which git then automatically uses to override ssh arguments
     track_submodules:  #yes/no                         #default no       # if yes, submodules will track the latest commit on their master branch (or other branch specified in .gitmodules). If no, submodules will be kept at the revision specified by the main project
     umask:                                                               # The umask to set before doing any checkouts, or any other repository maintenance.
     update:            #yes/no                         #default yes      # If no, do not retrieve new revisions from the origin repository
     verify_commit:     #yes/no                         #default no       # If yes, when cloning or checking out a version verify the signature of a GPG signed commit. This requires git version>=2.1.0 to be installed. 
     version:                                           #default HEAD     # What version of the repository to check out. This can be the the literal string HEAD, a branch name, a tag name. It can also be a SHA-1 hash, in which case refspec needs to be specified if the given revision is not already available.

]]></content>
    <tabTrigger>git_long</tabTrigger>
    <scope>source.yaml</scope>
</snippet>